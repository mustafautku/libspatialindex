{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "_build: CMake config & Build & Install libspatialindex LIBRARY",
			"type": "shell",
			"command": "${workspaceFolder}/.vscode/Build_library.sh",
			"group": {
				"kind": "build",
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "_build: build-and-install-libspatialindex",  // do not reconfigure the cmake
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build", "mybuild",
				"--target", "install",
				"-j", "8"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"problemMatcher": [],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		},
		// {
		// 	"label": "_build: Build libspatialindex tests",
		// 	"type": "shell",
		// 	"command": "${workspaceFolder}/.vscode/Build_tests.sh",
		// 	"group": {
		// 		"kind": "build",
		// 		"isDefault": false
		// 	},
		// 	"problemMatcher": []
		// },
		{
			"label": "_build: Build Active TEST File with CMake Target",
			"type": "shell",
			"command": "${workspaceFolder}/.vscode/Build_active.sh",
			"args": [
				"${relativeFile}"
			],
			"problemMatcher": [],
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			},
			"detail": "Builds only the active source TEST file's target using Build_active.sh"
		},
		{
			"label": "_clean: Clean libspatialindex",  // clean only build directory, leave installation dir.
			"type": "shell",
			"command": "${workspaceFolder}/.vscode/clean.sh",
			"group": {
				"kind": "none",
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "test-rtree-Generator",  // just print data to console
			"type": "shell",
			"command": "${workspaceFolder}/mybuild/test/test-rtree-Generator",
			"args": ["100","1"],
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test",
				// "env": {
				// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"
				// }
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "test-rtree-RTreeLoad",  // assume there exists "data" file in cwd.
			"type": "shell",
			"command": "${workspaceFolder}/mybuild/test/test-rtree-RTreeLoad",
			"args": ["data","tree","100","intersection"],
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test",
				// "env": {
				// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"
				// }
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "test-rtree-RTreeBulkLoad",  // assume there exists "data" file in cwd.
			"type": "shell",
			"command": "${workspaceFolder}/mybuild/test/test-rtree-RTreeBulkLoad",
			"args": ["data","tree","92","0.99"],
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test",
				// "env": {
				// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"
				// }
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "test-rtree-RTreeQuery",  // assume there exists "queries" file & "tree" idx in cwd.
			"type": "shell",
			"command": "${workspaceFolder}/mybuild/test/test-rtree-RTreeQuery",
			"args": ["queries","tree","intersection"],
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test",
				// "env": {
				// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"
				// }
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "rtree/test0",  // this my addition generates data & query files in cwd to run & debug RTree tests..
			"type": "shell",
			"command": "${workspaceFolder}/test/rtree/test0/run",
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test/",
				"env": {
					"PATH": "${workspaceFolder}/mybuild/test/:${env:PATH}",  // Ensure the test binary is in the PATH. otherwise, execs like test-rtree-Generator won't work.
					// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"	
				}
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "rtree/test1",  // built-in tests in library
			"type": "shell",
			"command": "${workspaceFolder}/test/rtree/test1/run",
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test/",
				"env": {
					"PATH": "${workspaceFolder}/mybuild/test/:${env:PATH}",  // Ensure the test binary is in the PATH. otherwise, execs like test-rtree-Generator won't work.
					// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"	
				}
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "rtree/test2", // built-in tests in library
			"type": "shell",
			"command": "${workspaceFolder}/test/rtree/test2/run",
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test/",
				"env": {
					"PATH": "${workspaceFolder}/mybuild/test/:${env:PATH}",  // Ensure the test binary is in the PATH. otherwise, execs like test-rtree-Generator won't work.
					// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"	
				}
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "rtree/test3",   // built-in tests in library
			"type": "shell",
			"command": "${workspaceFolder}/test/rtree/test3/run",
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test/",
				"env": {
					"PATH": "${workspaceFolder}/mybuild/test/:${env:PATH}",  // Ensure the test binary is in the PATH. otherwise, execs like test-rtree-Generator won't work.
					// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"	
				}
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "rtree/test4",   // built-in tests in library
			"type": "shell",
			"command": "${workspaceFolder}/test/rtree/test4/run",
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test/",
				"env": {
					"PATH": "${workspaceFolder}/mybuild/test/:${env:PATH}",  // Ensure the test binary is in the PATH. otherwise, execs like test-rtree-Generator won't work.
					// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"	
				}
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "geometry/test1",  // built-in tests in library
			"type": "shell",
			"command": "${workspaceFolder}/test/geometry/test1/run",
			"options": {
				"cwd": "${workspaceFolder}/mybuild/test/",
				"env": {
					"PATH": "${workspaceFolder}/mybuild/test/:${env:PATH}",  // Ensure the test binary is in the PATH. otherwise, execs like test-rtree-Generator won't work.
					// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"	
				}
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "index-tests",   // run all built-in tests in library
			"type": "shell",
			"command": "${workspaceFolder}/test/index-tests.sh",
			"options": {
				"cwd": "${workspaceFolder}/test/", // generates many files in the test directory but will be completely cleaned up by the cleanup-test-output.sh script.
				"env": {
					"PATH": "${workspaceFolder}/mybuild/test/:${env:PATH}",  // Ensure the test binary is in the PATH. otherwise, execs like test-rtree-Generator won't work.
				 	// "LD_LIBRARY_PATH": "${env:HOME}/PROGRAMMING/libspatialindex/lib"	
				}
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": []
		},
		{
			"label": "ctest",   // run all built-in tests in library
			"type": "shell",
			"command": "ctest -V",
			"options": {
				"cwd": "${workspaceFolder}/mybuild", // generates many files in the test directory but will be completely cleaned up by the cleanup-test-output.sh script.
				// "env": { bu asagidailere gerek kalmad覺..cmake config de bunlar set edildi..
				// 	"PATH": "${workspaceFolder}/mybuild/test/:${env:PATH}",  // Ensure the test binary is in the PATH. otherwise, execs like test-rtree-Generator won't work. test/CMakeLists.txt'de mytest1 tan覺m覺nda "PATH=${CMAKE_BINARY_DIR}/test/:$ENV{PATH}") yapildi zaten
				//  	"LD_LIBRARY_PATH": "${workspaceFolder}/mybuild/lib"	// buna da gerek klamd覺. cmakke komutunda -DCMAKE_INSTALL_RPATH="$HOME/PROGRAMMING/libspatialindex/lib;$HOME/projeler/libspatialindex/mybuild/lib"  yapildi..
				// }
			},
			"group": {
				"kind": "test", // "test" group is used for running tests. test,build,clean,none  bunlar keyword!!
				"isDefault": false
			},
			"problemMatcher": [],
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			}
		}
	]
}